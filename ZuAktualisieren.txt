Hier ist eine Road-Map aller Code-Stellen, die Sie an die neue Dateistruktur („json_dir_structure_new“) und die angepasste PRD angleichen müssen.
Ich unterscheide zwischen Dateipfaden, Prompt-Texten/Kommentare und kleineren Strukturanpassungen.

1 Neue Dateinamen ↔ alte Referenzen
alter Name (im Code)	neuer Name laut PRD	Vorkommen*
tblLeistungskatalog.json	LKAAT_Leistungskatalog.json	server.py Konstanten 
 / calculator.js DATA_PATHS 
 / LLM-Prompt in server.py 
tblPauschaleLeistungsposition.json	PAUSCHALEN_Leistungspositionen.json	server.py Konstanten 
 / calculator.js 
tblPauschalen.json	PAUSCHALEN_Pauschalen.json	gleiche Stellen wie oben
tblPauschaleBedingungen.json	PAUSCHALEN_Bedingungen.json	gleiche Stellen wie oben
tblTabellen.json	PAUSCHALEN_Tabellen.json	gleiche Stellen wie oben
TARDOCGesamt_optimiert_Tarifpositionen.json	aufgesplittet in
• TARDOC_Tarifpositionen.json
• TARDOC_Interpretationen.json	server.py Konstanten 
 / calculator.js 

* „Vorkommen“ nennt nur die ersten Fundstellen; Suchen Sie im gesamten File nach weiteren Hard-Codings derselben Strings.

2 Konkrete Code-Anpassungen
2.1 server.py
Abschnitt	Änderung
Konstanten (LEISTUNGSKATALOG_PATH … TABELLEN_PATH)	Pfade auf neue Dateinamen ändern.
files_to_load-Dict	Schlüssel beibehalten, Werte auf die neuen Dateien zeigen. Für die zwei TARDOC-Files:
"TARDOC_TARIF": (DATA_DIR / "TARDOC_Tarifpositionen.json", …)
"TARDOC_INTERP": (DATA_DIR / "TARDOC_Interpretationen.json", …)
Validierungs-Prompt (call_gemini_stage1)	Im Prompt den Begriff tblLeistungskatalog durch LKAAT_Leistungskatalog ersetzen, sonst erkennt das LLM den neuen Kontext nicht 
.
load_data()	• Zwei separate Ladevorgänge oder ein kombiniertes Dict/merge für die neuen TARDOC-Dateien.
• tabellen_dict_by_table auf neue PAUSCHALEN_Tabellen.json beziehen.
• Logging-Texte („tbl…“) anpassen.
(optionale) Hilfsfunktionen	Wenn irgendwo noch feste Prüfung auf TARDOCGesamt_optimiert vorkommt, löschen oder auf den neuen Tariffile-Key umbiegen.

2.2 calculator.js (Frontend)
Im Objekt DATA_PATHS alle sechs Pfade auf die neuen Dateien umstellen 
.

Falls Sie im Frontend später auf Interpretationen der Tarifpositionen zugreifen wollen, brauchen Sie ein weiteres Array (data_tardocInterpretationen) und müssen es in loadData() mitladen.

2.3 Prompt-Texte / Kommentare
Auch Kommentare in PRD-Konformen Strings (LLM-Prompts, HTML-Tooltips, Konsolen-Logs) sollten nicht mehr auf tbl… verweisen, um Verwirrung zu vermeiden.

Beispiele:<br> – "basierend auf tblLeistungskatalog" → "basierend auf LKAAT_Leistungskatalog".
– Pauschalen-Beschreibungen, die „tblPauschaleLeistungsposition“ erwähnen.

2.4 utils.py / regelpruefer_pauschale.py
Keine Pfadänderung nötig – diese Module arbeiten datenunabhängig.

Prüfen Sie lediglich, ob die Spalten in PAUSCHALEN_Tabellen.json gleich heißen („Code“, „Code_Text“, „Tabelle_Typ“). Wenn nicht, hier mapping anpassen.

2.5 PRD-Synchronität
Die aktualisierte PRD spricht überall von den neuen Dateinamen; Ihre Doc-Strings und Readme sollten das spiegeln, sonst laufen künftige Suche/Find-Funktionen ins Leere.

3 Strukturelle Änderungen (TARDOC-Split)
Auswirkung	To-dos
Backend-Logik nutzt bisher nur den Tarifpositions-Teil des alten Gesamtfiles.	Laden Sie TARDOC_Tarifpositionen.json wie gehabt. Falls Sie Interpretationen (Erklärungen, Kapiteltexte) brauchen, laden Sie TARDOC_Interpretationen.json zusätzlich in ein zweites Dict.
prepare_tardoc_abrechnung() (falls vorhanden)	Prüfen, ob es auf Felder zugreift, die nun im Interpretations-File liegen; ggf. Pfade kombinieren.
Frontend	Wenn Sie Interpretationen anzeigen möchten, erweitern Sie das Data-Binding analog zu data_tardocGesamt.

4 Schnelle Check-Liste
Suchen & Ersetzen aller alten Filenamen in:

server.py

calculator.js

eventuelle Shell-Scripts / CI-Pipelines

Prompt-Texte in server.py (Stage 1 & 2) aktualisieren.

load_data()-Mapping in server.py auf neue Dateien umstellen.

Zusatz-Loader für TARDOC_Interpretationen.json einbauen (wenn benötigt).

Front-End DATA_PATHS angleichen und eventuell neue Arrays einführen.

Dokumentation / Kommentare an die neuen Begriffe angleichen.

Erledigen Sie diese Punkte vollständig, läuft das System ohne Code-Brüche gegen die neue JSON-Struktur.